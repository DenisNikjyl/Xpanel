#!/bin/bash

# Xpanel Agent Auto-Installer v2.0
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ VPS

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AGENT_DIR="/opt/xpanel-agent"
SERVICE_NAME="xpanel-agent"
LOG_FILE="/var/log/xpanel-agent.log"
AGENT_PORT="8888"
AGENT_VERSION="2.0.0"

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë        Xpanel Agent Installer        ‚ïë${NC}"
echo -e "${BLUE}‚ïë     HTTP –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ VPS   ‚ïë${NC}"
echo -e "${BLUE}‚ïë            –í–µ—Ä—Å–∏—è 2.0.0              ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root${NC}"
   echo -e "${YELLOW}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo $0${NC}"
   exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
        OS=$(lsb_release -si)
        VER=$(lsb_release -sr)
    else
        OS=$(uname -s)
        VER=$(uname -r)
    fi
    
    echo -e "${BLUE}üñ•Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: ${OS} ${VER}${NC}"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    if command -v apt-get >/dev/null 2>&1; then
        # Debian/Ubuntu
        apt-get update
        apt-get install -y python3 python3-pip python3-venv curl wget ufw
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ psutil —á–µ—Ä–µ–∑ pip
        pip3 install psutil
        
    elif command -v yum >/dev/null 2>&1; then
        # CentOS/RHEL
        yum update -y
        yum install -y python3 python3-pip curl wget firewalld
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ psutil —á–µ—Ä–µ–∑ pip
        pip3 install psutil
        
    elif command -v dnf >/dev/null 2>&1; then
        # Fedora
        dnf update -y
        dnf install -y python3 python3-pip curl wget firewalld
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ psutil —á–µ—Ä–µ–∑ pip
        pip3 install psutil
        
    else
        echo -e "${RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    echo -e "${YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
    mkdir -p /etc/xpanel
    mkdir -p ${AGENT_DIR}
    mkdir -p /var/log
    echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
configure_firewall() {
    echo -e "${YELLOW}üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...${NC}"
    
    if command -v ufw >/dev/null 2>&1; then
        # Ubuntu/Debian
        ufw allow ${AGENT_PORT}/tcp
        echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç ${AGENT_PORT} –æ—Ç–∫—Ä—ã—Ç –≤ UFW${NC}"
    elif command -v firewall-cmd >/dev/null 2>&1; then
        # CentOS/RHEL/Fedora
        firewall-cmd --permanent --add-port=${AGENT_PORT}/tcp
        firewall-cmd --reload
        echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç ${AGENT_PORT} –æ—Ç–∫—Ä—ã—Ç –≤ firewalld${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π—Ä–≤–æ–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç ${AGENT_PORT} –æ—Ç–∫—Ä—ã—Ç${NC}"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
create_agent() {
    echo -e "${YELLOW}üìù –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...${NC}"
    
    cat > ${AGENT_DIR}/xpanel-agent.py << 'AGENT_EOF'
#!/usr/bin/env python3
"""
Xpanel Agent v2.0 - HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPS —Å–µ—Ä–≤–µ—Ä–∞–º–∏
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ HTTP API —Å–µ—Ä–≤–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import os
import sys
import json
import time
import psutil
import subprocess
import threading
from datetime import datetime
import uuid
import socket
import hashlib
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AGENT_VERSION = "2.0.0"
AGENT_PORT = 8888  # –ü–æ—Ä—Ç –¥–ª—è HTTP API
ALERT_CPU_THRESHOLD = 80  # %
ALERT_RAM_THRESHOLD = 80  # %
API_KEY_FILE = '/etc/xpanel/api_key'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/xpanel-agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class XpanelAgentHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API –∞–≥–µ–Ω—Ç–∞"""
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logger.info(format % args)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not self.check_auth():
            return
        
        if path == '/api/stats':
            self.handle_get_stats()
        elif path == '/api/status':
            self.handle_get_status()
        elif path == '/api/info':
            self.handle_get_info()
        else:
            self.send_error(404, 'Endpoint not found')
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not self.check_auth():
            return
        
        if path == '/api/execute':
            self.handle_execute_command()
        else:
            self.send_error(404, 'Endpoint not found')
    
    def check_auth(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞"""
        auth_header = self.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            self.send_error(401, 'Authorization required')
            return False
        
        token = auth_header[7:]  # –£–±–∏—Ä–∞–µ–º 'Bearer '
        expected_key = self.server.agent.api_key
        
        if token != expected_key:
            self.send_error(403, 'Invalid API key')
            return False
        
        return True
    
    def send_json_response(self, data, status=200):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(status)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
    
    def handle_get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        stats = self.server.agent.get_system_stats()
        if stats:
            self.send_json_response(stats)
        else:
            self.send_error(500, 'Failed to collect stats')
    
    def handle_get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        status = {
            'status': 'online',
            'version': AGENT_VERSION,
            'server_id': self.server.agent.server_id,
            'uptime': time.time() - self.server.agent.start_time,
            'last_update': datetime.now().isoformat()
        }
        self.send_json_response(status)
    
    def handle_get_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        info = {
            'hostname': socket.gethostname(),
            'platform': os.name,
            'agent_version': AGENT_VERSION,
            'server_id': self.server.agent.server_id,
            'api_port': AGENT_PORT
        }
        self.send_json_response(info)
    
    def handle_execute_command(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            command = data.get('command')
            if not command:
                self.send_error(400, 'Command is required')
                return
            
            result = self.server.agent.execute_command(command)
            self.send_json_response(result)
            
        except Exception as e:
            logger.error(f"Error executing command: {e}")
            self.send_error(500, f'Command execution failed: {str(e)}')

class XpanelAgent:
    def __init__(self):
        self.server_id = self.get_server_id()
        self.api_key = self.load_api_key()
        self.running = True
        self.start_time = time.time()
        self.last_stats = {}
        self.httpd = None
        
    def get_server_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞"""
        hostname = socket.gethostname()
        mac = ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) 
                       for elements in range(0,2*6,2)][::-1])
        server_id = hashlib.md5(f"{hostname}-{mac}".encode()).hexdigest()[:16]
        return server_id
    
    def load_api_key(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(API_KEY_FILE, 'r') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≥–µ–Ω—Ç–∞.")
            sys.exit(1)
    
    def get_system_stats(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            
            # Memory
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_total = memory.total
            memory_used = memory.used
            
            # Disk
            disk = psutil.disk_usage('/')
            disk_percent = disk.percent
            disk_total = disk.total
            disk_used = disk.used
            
            # Network
            net_io = psutil.net_io_counters()
            
            # Load average
            load_avg = os.getloadavg() if hasattr(os, 'getloadavg') else [0, 0, 0]
            
            # Uptime
            uptime = time.time() - psutil.boot_time()
            
            stats = {
                'timestamp': datetime.now().isoformat(),
                'server_id': self.server_id,
                'cpu': {
                    'percent': cpu_percent,
                    'count': cpu_count,
                    'load_avg': load_avg
                },
                'memory': {
                    'percent': memory_percent,
                    'total': memory_total,
                    'used': memory_used,
                    'available': memory.available
                },
                'disk': {
                    'percent': disk_percent,
                    'total': disk_total,
                    'used': disk_used,
                    'free': disk.free
                },
                'network': {
                    'bytes_sent': net_io.bytes_sent,
                    'bytes_recv': net_io.bytes_recv,
                    'packets_sent': net_io.packets_sent,
                    'packets_recv': net_io.packets_recv
                },
                'uptime': uptime,
                'agent_version': AGENT_VERSION
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def start_http_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.httpd = HTTPServer(('0.0.0.0', AGENT_PORT), XpanelAgentHandler)
            self.httpd.agent = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≥–µ–Ω—Ç
            
            logger.info(f"üöÄ Xpanel Agent HTTP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {AGENT_PORT}")
            logger.info(f"üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:{AGENT_PORT}/api/")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            server_thread = threading.Thread(target=self.httpd.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def stop_http_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.httpd:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
            self.httpd.shutdown()
            self.httpd.server_close()
            self.httpd = None
    
    def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=300
            )
            
            return {
                'success': result.returncode == 0,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'returncode': result.returncode
            }
            
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'stdout': '',
                'stderr': 'Command timeout',
                'returncode': -1
            }
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Xpanel Agent v{AGENT_VERSION}")
        logger.info(f"üÜî Server ID: {self.server_id}")
        logger.info(f"üîë API Key: {'*' * (len(self.api_key) - 4) + self.api_key[-4:]}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        if not self.start_http_server():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        while self.running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.get_system_stats()
                if stats:
                    self.last_stats = stats
                    logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: CPU {stats['cpu']['percent']:.1f}%, RAM {stats['memory']['percent']:.1f}%")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                time.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.running = False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(30)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        self.stop_http_server()
        logger.info("‚úÖ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    agent = XpanelAgent()
    agent.run()
AGENT_EOF

    chmod +x ${AGENT_DIR}/xpanel-agent.py
    echo -e "${GREEN}‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
create_service() {
    echo -e "${YELLOW}‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    
    cat > /etc/systemd/system/${SERVICE_NAME}.service << EOF
[Unit]
Description=Xpanel Agent v2.0 - HTTP API Server
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
WorkingDirectory=${AGENT_DIR}
ExecStart=/usr/bin/python3 ${AGENT_DIR}/xpanel-agent.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ReadWritePaths=${AGENT_DIR} /var/log /etc/xpanel

[Install]
WantedBy=multi-user.target
EOF

    echo -e "${GREEN}‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω${NC}"
}

# –ó–∞–ø—Ä–æ—Å API –∫–ª—é—á–∞
request_api_key() {
    echo -e "${BLUE}üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞${NC}"
    echo -e "${YELLOW}–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π API –∫–ª—é—á${NC}"
    echo -e "${YELLOW}–≠—Ç–æ—Ç –∫–ª—é—á –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–∞–Ω–µ–ª–∏${NC}"
    echo ""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π API –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_KEY=$(openssl rand -hex 32 2>/dev/null || head -c 32 /dev/urandom | xxd -p -c 32)
    
    echo -e "${GREEN}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω API –∫–ª—é—á: ${DEFAULT_KEY}${NC}"
    read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á? [Y/n]: " USE_GENERATED
    
    if [[ "$USE_GENERATED" =~ ^[Nn]$ ]]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π API –∫–ª—é—á: " API_KEY
        if [ -z "$API_KEY" ]; then
            echo -e "${RED}‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º${NC}"
            exit 1
        fi
    else
        API_KEY="$DEFAULT_KEY"
    fi
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
    echo "$API_KEY" > /etc/xpanel/api_key
    chmod 600 /etc/xpanel/api_key
    
    echo -e "${GREEN}‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω${NC}"
    echo -e "${BLUE}üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è VPS –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
    echo -e "${YELLOW}${API_KEY}${NC}"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
start_service() {
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞...${NC}"
    
    systemctl daemon-reload
    systemctl enable ${SERVICE_NAME}
    systemctl start ${SERVICE_NAME}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    sleep 3
    if systemctl is-active --quiet ${SERVICE_NAME}; then
        echo -e "${GREEN}‚úÖ Xpanel Agent —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!${NC}"
        echo ""
        echo -e "${BLUE}üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:${NC}"
        echo -e "${YELLOW}  –°—Ç–∞—Ç—É—Å:     systemctl status ${SERVICE_NAME}${NC}"
        echo -e "${YELLOW}  –õ–æ–≥–∏:       journalctl -u ${SERVICE_NAME} -f${NC}"
        echo -e "${YELLOW}  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: systemctl restart ${SERVICE_NAME}${NC}"
        echo -e "${YELLOW}  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:  systemctl stop ${SERVICE_NAME}${NC}"
        echo ""
        echo -e "${BLUE}üåê HTTP API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞:${NC}"
        echo -e "${YELLOW}  http://$(hostname -I | awk '{print $1}'):${AGENT_PORT}/api/${NC}"
        echo -e "${YELLOW}  http://localhost:${AGENT_PORT}/api/${NC}"
        echo ""
        echo -e "${GREEN}üéâ –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç VPS –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è API –∫–ª—é—á –≤—ã—à–µ${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u ${SERVICE_NAME}${NC}"
        exit 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    detect_os
    install_dependencies
    create_directories
    configure_firewall
    create_agent
    create_service
    request_api_key
    start_service
}

# –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main
