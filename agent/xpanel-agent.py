#!/usr/bin/env python3
"""
Xpanel Agent - HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPS —Å–µ—Ä–≤–µ—Ä–∞–º–∏
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ HTTP API —Å–µ—Ä–≤–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import os
import sys
import json
import time
import psutil
import subprocess
import threading
from datetime import datetime
import uuid
import socket
import hashlib
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import ssl

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AGENT_VERSION = "1.0.0"
AGENT_PORT = 8888  # –ü–æ—Ä—Ç –¥–ª—è HTTP API
ALERT_CPU_THRESHOLD = 80  # %
ALERT_RAM_THRESHOLD = 80  # %
API_KEY_FILE = '/etc/xpanel/api_key'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/xpanel-agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class XpanelAgentHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API –∞–≥–µ–Ω—Ç–∞"""
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logger.info(format % args)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not self.check_auth():
            return
        
        if path == '/api/stats':
            self.handle_get_stats()
        elif path == '/api/status':
            self.handle_get_status()
        elif path == '/api/info':
            self.handle_get_info()
        else:
            self.send_error(404, 'Endpoint not found')
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not self.check_auth():
            return
        
        if path == '/api/execute':
            self.handle_execute_command()
        else:
            self.send_error(404, 'Endpoint not found')
    
    def check_auth(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞"""
        auth_header = self.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            self.send_error(401, 'Authorization required')
            return False
        
        token = auth_header[7:]  # –£–±–∏—Ä–∞–µ–º 'Bearer '
        expected_key = self.server.agent.api_key
        
        if token != expected_key:
            self.send_error(403, 'Invalid API key')
            return False
        
        return True
    
    def send_json_response(self, data, status=200):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(status)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
    
    def handle_get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        stats = self.server.agent.get_system_stats()
        if stats:
            self.send_json_response(stats)
        else:
            self.send_error(500, 'Failed to collect stats')
    
    def handle_get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        status = {
            'status': 'online',
            'version': AGENT_VERSION,
            'server_id': self.server.agent.server_id,
            'uptime': time.time() - self.server.agent.start_time,
            'last_update': datetime.now().isoformat()
        }
        self.send_json_response(status)
    
    def handle_get_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        info = {
            'hostname': socket.gethostname(),
            'platform': os.name,
            'agent_version': AGENT_VERSION,
            'server_id': self.server.agent.server_id,
            'api_port': AGENT_PORT
        }
        self.send_json_response(info)
    
    def handle_execute_command(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            command = data.get('command')
            if not command:
                self.send_error(400, 'Command is required')
                return
            
            result = self.server.agent.execute_command(command)
            self.send_json_response(result)
            
        except Exception as e:
            logger.error(f"Error executing command: {e}")
            self.send_error(500, f'Command execution failed: {str(e)}')

class XpanelAgent:
    def __init__(self):
        self.server_id = self.get_server_id()
        self.api_key = self.load_api_key()
        self.running = True
        self.start_time = time.time()
        self.last_stats = {}
        self.httpd = None
        
    def get_server_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞"""
        hostname = socket.gethostname()
        mac = ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) 
                       for elements in range(0,2*6,2)][::-1])
        server_id = hashlib.md5(f"{hostname}-{mac}".encode()).hexdigest()[:16]
        return server_id
    
    def load_api_key(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(API_KEY_FILE, 'r') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≥–µ–Ω—Ç–∞.")
            sys.exit(1)
    
    def get_system_stats(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            
            # Memory
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_total = memory.total
            memory_used = memory.used
            
            # Disk
            disk = psutil.disk_usage('/')
            disk_percent = disk.percent
            disk_total = disk.total
            disk_used = disk.used
            
            # Network
            net_io = psutil.net_io_counters()
            
            # Load average
            load_avg = os.getloadavg() if hasattr(os, 'getloadavg') else [0, 0, 0]
            
            # Uptime
            uptime = time.time() - psutil.boot_time()
            
            stats = {
                'timestamp': datetime.now().isoformat(),
                'server_id': self.server_id,
                'cpu': {
                    'percent': cpu_percent,
                    'count': cpu_count,
                    'load_avg': load_avg
                },
                'memory': {
                    'percent': memory_percent,
                    'total': memory_total,
                    'used': memory_used,
                    'available': memory.available
                },
                'disk': {
                    'percent': disk_percent,
                    'total': disk_total,
                    'used': disk_used,
                    'free': disk.free
                },
                'network': {
                    'bytes_sent': net_io.bytes_sent,
                    'bytes_recv': net_io.bytes_recv,
                    'packets_sent': net_io.packets_sent,
                    'packets_recv': net_io.packets_recv
                },
                'uptime': uptime,
                'agent_version': AGENT_VERSION
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def start_http_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.httpd = HTTPServer(('0.0.0.0', AGENT_PORT), XpanelAgentHandler)
            self.httpd.agent = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≥–µ–Ω—Ç
            
            logger.info(f"üöÄ Xpanel Agent HTTP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {AGENT_PORT}")
            logger.info(f"üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:{AGENT_PORT}/api/")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            server_thread = threading.Thread(target=self.httpd.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def stop_http_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.httpd:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
            self.httpd.shutdown()
            self.httpd.server_close()
            self.httpd = None
    
    def check_alerts(self, stats):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        alerts = []
        
        if stats['cpu']['percent'] > ALERT_CPU_THRESHOLD:
            alerts.append({
                'type': 'cpu_high',
                'value': stats['cpu']['percent'],
                'threshold': ALERT_CPU_THRESHOLD,
                'message': f"–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {stats['cpu']['percent']:.1f}%"
            })
        
        if stats['memory']['percent'] > ALERT_RAM_THRESHOLD:
            alerts.append({
                'type': 'memory_high',
                'value': stats['memory']['percent'],
                'threshold': ALERT_RAM_THRESHOLD,
                'message': f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {stats['memory']['percent']:.1f}%"
            })
        
        if stats['disk']['percent'] > 90:
            alerts.append({
                'type': 'disk_high',
                'value': stats['disk']['percent'],
                'threshold': 90,
                'message': f"–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: {stats['disk']['percent']:.1f}%"
            })
        
        return alerts
    
    def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=300
            )
            
            return {
                'success': result.returncode == 0,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'returncode': result.returncode
            }
            
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'stdout': '',
                'stderr': 'Command timeout',
                'returncode': -1
            }
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def get_server_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        return {
            'server_id': self.server_id,
            'hostname': socket.gethostname(),
            'platform': os.name,
            'agent_version': AGENT_VERSION,
            'api_port': AGENT_PORT,
            'uptime': time.time() - self.start_time
        }
    
    def get_current_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π)"""
        return self.last_stats
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Xpanel Agent v{AGENT_VERSION}")
        logger.info(f"üÜî Server ID: {self.server_id}")
        logger.info(f"üîë API Key: {'*' * (len(self.api_key) - 4) + self.api_key[-4:]}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        if not self.start_http_server():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        while self.running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.get_system_stats()
                if stats:
                    self.last_stats = stats
                    logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: CPU {stats['cpu']['percent']:.1f}%, RAM {stats['memory']['percent']:.1f}%")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                time.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.running = False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(30)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        self.stop_http_server()
        logger.info("‚úÖ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def install_agent():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    print("=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xpanel Agent ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('/etc/xpanel', exist_ok=True)
    os.makedirs('/var/log', exist_ok=True)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API –∫–ª—é—á
    api_key = input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –æ—Ç –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ").strip()
    if not api_key:
        print("–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
    with open(API_KEY_FILE, 'w') as f:
        f.write(api_key)
    
    os.chmod(API_KEY_FILE, 0o600)
    
    # –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å
    service_content = f"""[Unit]
Description=Xpanel Agent
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/bin/python3 {os.path.abspath(__file__)}
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
    
    with open('/etc/systemd/system/xpanel-agent.service', 'w') as f:
        f.write(service_content)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'xpanel-agent'])
    subprocess.run(['systemctl', 'start', 'xpanel-agent'])
    
    print("‚úÖ Xpanel Agent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!")
    print("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: systemctl status xpanel-agent")
    print("–õ–æ–≥–∏: journalctl -u xpanel-agent -f")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "install":
        install_agent()
    else:
        import uuid
        agent = XpanelAgent()
        agent.run()
