const axios = require('axios');
const EventEmitter = require('events');

/**
 * VPS Manager - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä–∞—Ö
 * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∞–≥–µ–Ω—Ç–∞–º
 */
class VPSManager extends EventEmitter {
    constructor() {
        super();
        this.connectedVPS = new Map(); // Map<vpsId, connection>
        this.vpsConfigs = new Map(); // Map<vpsId, config>
        this.connectionAttempts = new Map(); // Map<vpsId, attemptCount>
        this.maxRetries = 3;
        this.connectionTimeout = 10000; // 10 —Å–µ–∫—É–Ω–¥
        this.statsUpdateInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.intervalIds = new Map(); // Map<vpsId, intervalId>
        
        console.log('üîß VPS Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç VPS –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     * @param {string} vpsId - ID VPS
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    addVPS(vpsId, config) {
        const vpsConfig = {
            id: vpsId,
            ip: config.ip,
            port: config.port || 8888,
            apiKey: config.apiKey,
            name: config.name || `VPS-${vpsId}`,
            userId: config.userId,
            ...config
        };

        this.vpsConfigs.set(vpsId, vpsConfig);
        this.connectionAttempts.set(vpsId, 0);

        console.log(`üì° –î–æ–±–∞–≤–ª–µ–Ω VPS: ${vpsConfig.name} (${vpsConfig.ip}:${vpsConfig.port})`);
        
        // –°—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.connectToVPS(vpsId);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç VPS –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     * @param {string} vpsId - ID VPS
     */
    removeVPS(vpsId) {
        this.disconnectVPS(vpsId);
        this.vpsConfigs.delete(vpsId);
        this.connectionAttempts.delete(vpsId);
        
        console.log(`üóëÔ∏è VPS ${vpsId} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ VPS –∞–≥–µ–Ω—Ç—É
     * @param {string} vpsId - ID VPS
     */
    async connectToVPS(vpsId) {
        const config = this.vpsConfigs.get(vpsId);
        if (!config) {
            console.error(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è VPS ${vpsId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return false;
        }

        const attempts = this.connectionAttempts.get(vpsId) || 0;
        if (attempts >= this.maxRetries) {
            console.error(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${config.name}`);
            this.emit('vps_connection_failed', { vpsId, config, reason: 'max_retries' });
            return false;
        }

        try {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${config.name} (${config.ip}:${config.port}) - –ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
            const response = await this.makeRequest(vpsId, 'GET', '/api/status');
            
            if (response && response.status === 'online') {
                // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                this.connectedVPS.set(vpsId, {
                    config,
                    status: 'connected',
                    lastSeen: new Date(),
                    serverInfo: response
                });

                this.connectionAttempts.set(vpsId, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ ${config.name}`);
                console.log(`üìä Server ID: ${response.server_id}, Version: ${response.version}`);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                this.startStatsUpdates(vpsId);
                
                this.emit('vps_connected', { vpsId, config, serverInfo: response });
                return true;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${config.name}: ${error.message}`);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            this.connectionAttempts.set(vpsId, attempts + 1);
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (this.vpsConfigs.has(vpsId) && !this.connectedVPS.has(vpsId)) {
                    this.connectToVPS(vpsId);
                }
            }, 30000);
        }

        return false;
    }

    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç VPS
     * @param {string} vpsId - ID VPS
     */
    disconnectVPS(vpsId) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const intervalId = this.intervalIds.get(vpsId);
        if (intervalId) {
            clearInterval(intervalId);
            this.intervalIds.delete(vpsId);
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        const connection = this.connectedVPS.get(vpsId);
        if (connection) {
            this.connectedVPS.delete(vpsId);
            console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç ${connection.config.name}`);
            this.emit('vps_disconnected', { vpsId, config: connection.config });
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è VPS
     * @param {string} vpsId - ID VPS
     */
    startStatsUpdates(vpsId) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingInterval = this.intervalIds.get(vpsId);
        if (existingInterval) {
            clearInterval(existingInterval);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        const intervalId = setInterval(async () => {
            await this.updateVPSStats(vpsId);
        }, this.statsUpdateInterval);

        this.intervalIds.set(vpsId, intervalId);
        
        // –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateVPSStats(vpsId);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VPS
     * @param {string} vpsId - ID VPS
     */
    async updateVPSStats(vpsId) {
        try {
            const stats = await this.getVPSStats(vpsId);
            if (stats) {
                const connection = this.connectedVPS.get(vpsId);
                if (connection) {
                    connection.lastStats = stats;
                    connection.lastSeen = new Date();
                    this.emit('vps_stats_updated', { vpsId, stats, config: connection.config });
                }
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è VPS ${vpsId}: ${error.message}`);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.code === 'ECONNREFUSED' || error.code === 'ETIMEDOUT') {
                console.log(`üîÑ –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VPS ${vpsId}, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...`);
                this.disconnectVPS(vpsId);
                setTimeout(() => this.connectToVPS(vpsId), 5000);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VPS
     * @param {string} vpsId - ID VPS
     * @returns {Object|null} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    async getVPSStats(vpsId) {
        try {
            const response = await this.makeRequest(vpsId, 'GET', '/api/stats');
            return response;
        } catch (error) {
            throw error;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ VPS
     * @param {string} vpsId - ID VPS
     * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @returns {Object|null} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
     */
    async executeCommand(vpsId, command) {
        try {
            const response = await this.makeRequest(vpsId, 'POST', '/api/execute', {
                command: command
            });
            
            console.log(`üíª –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ VPS ${vpsId}: ${command}`);
            return response;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ VPS ${vpsId}: ${error.message}`);
            throw error;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ VPS –∞–≥–µ–Ω—Ç—É
     * @param {string} vpsId - ID VPS
     * @param {string} method - HTTP –º–µ—Ç–æ–¥
     * @param {string} endpoint - Endpoint
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Object} –û—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
     */
    async makeRequest(vpsId, method, endpoint, data = null) {
        const config = this.vpsConfigs.get(vpsId);
        if (!config) {
            throw new Error(`VPS ${vpsId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
        }

        const url = `http://${config.ip}:${config.port}${endpoint}`;
        const requestConfig = {
            method,
            url,
            headers: {
                'Authorization': `Bearer ${config.apiKey}`,
                'Content-Type': 'application/json'
            },
            timeout: this.connectionTimeout
        };

        if (data && (method === 'POST' || method === 'PUT')) {
            requestConfig.data = data;
        }

        const response = await axios(requestConfig);
        return response.data;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö VPS
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPS
     */
    getConnectedVPS() {
        const result = [];
        
        for (const [vpsId, connection] of this.connectedVPS) {
            result.push({
                id: vpsId,
                name: connection.config.name,
                ip: connection.config.ip,
                port: connection.config.port,
                status: connection.status,
                lastSeen: connection.lastSeen,
                serverInfo: connection.serverInfo,
                lastStats: connection.lastStats,
                userId: connection.config.userId
            });
        }
        
        return result;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º VPS
     * @param {string} vpsId - ID VPS
     * @returns {Object|null} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPS –∏–ª–∏ null
     */
    getVPSInfo(vpsId) {
        const connection = this.connectedVPS.get(vpsId);
        if (!connection) {
            return null;
        }

        return {
            id: vpsId,
            name: connection.config.name,
            ip: connection.config.ip,
            port: connection.config.port,
            status: connection.status,
            lastSeen: connection.lastSeen,
            serverInfo: connection.serverInfo,
            lastStats: connection.lastStats,
            userId: connection.config.userId
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ VPS
     * @param {string} vpsId - ID VPS
     * @returns {boolean} true –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
     */
    isVPSConnected(vpsId) {
        return this.connectedVPS.has(vpsId);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç VPS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Array} –ú–∞—Å—Å–∏–≤ VPS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserVPS(userId) {
        const userVPS = [];
        
        for (const [vpsId, connection] of this.connectedVPS) {
            if (connection.config.userId === userId) {
                userVPS.push({
                    id: vpsId,
                    name: connection.config.name,
                    ip: connection.config.ip,
                    port: connection.config.port,
                    status: connection.status,
                    lastSeen: connection.lastSeen,
                    serverInfo: connection.serverInfo,
                    lastStats: connection.lastStats
                });
            }
        }
        
        return userVPS;
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
     */
    shutdown() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VPS Manager...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        for (const intervalId of this.intervalIds.values()) {
            clearInterval(intervalId);
        }
        this.intervalIds.clear();

        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö VPS
        for (const vpsId of this.connectedVPS.keys()) {
            this.disconnectVPS(vpsId);
        }

        console.log('‚úÖ VPS Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

module.exports = VPSManager;
