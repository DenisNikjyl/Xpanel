const TelegramBot = require('node-telegram-bot-api');
const crypto = require('crypto');

// Telegram Bot Token
const BOT_TOKEN = '8303479475:AAEYew6T5nGKP-0OR_h_5yXPujzGPkBwjjk';

class XpanelTelegramBot {
    constructor() {
        this.bot = new TelegramBot(BOT_TOKEN, { polling: true });
        this.pendingCodes = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏
        this.userBindings = new Map(); // –ü—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.setupHandlers();
        console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω');
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, (msg) => {
            const chatId = msg.chat.id;
            const welcomeMessage = `
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Xpanel Bot!*

–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–∏—Ö VPS —Å–µ—Ä–≤–µ—Ä–æ–≤:
‚Ä¢ üìä –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU/RAM
‚Ä¢ üîê –ü–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
‚Ä¢ ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è

–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
            `;
            
            this.bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ 6-–∑–Ω–∞—á–Ω—ã—Ö –∫–æ–¥–æ–≤
        this.bot.on('message', (msg) => {
            const chatId = msg.chat.id;
            const text = msg.text;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ 6-–∑–Ω–∞—á–Ω—ã–º –∫–æ–¥–æ–º
            if (text && /^\d{6}$/.test(text.trim())) {
                console.log(`üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏: ${text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.username || msg.from.first_name}`);
                this.handleBindingCode(chatId, text.trim(), msg.from);
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /status
        this.bot.onText(/\/status/, (msg) => {
            const chatId = msg.chat.id;
            const binding = this.getUserBinding(chatId);
            
            if (binding) {
                this.bot.sendMessage(chatId, 
                    `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: *${binding.username}*\n` +
                    `üìÖ –î–∞—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏: ${binding.bindDate}`,
                    { parse_mode: 'Markdown' }
                );
            } else {
                this.bot.sendMessage(chatId, 
                    '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n' +
                    '–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞'
                );
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /unbind
        this.bot.onText(/\/unbind/, (msg) => {
            const chatId = msg.chat.id;
            this.unbindUser(chatId);
            this.bot.sendMessage(chatId, '‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    generateBindingCode(userId, username) {
        const code = Math.floor(100000 + Math.random() * 900000).toString();
        const expiry = Date.now() + (20 * 60 * 1000); // 20 –º–∏–Ω—É—Ç
        
        this.pendingCodes.set(code, {
            userId,
            username,
            expiry,
            attempts: 0
        });

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
        setTimeout(() => {
            this.pendingCodes.delete(code);
        }, 20 * 60 * 1000);

        console.log(`üì± –ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ ${code} —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
        return code;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    handleBindingCode(chatId, code, telegramUser) {
        const binding = this.pendingCodes.get(code);
        
        if (!binding) {
            this.bot.sendMessage(chatId, 
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥\n' +
                '–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            );
            return false;
        }

        if (Date.now() > binding.expiry) {
            this.pendingCodes.delete(code);
            this.bot.sendMessage(chatId, 
                '‚è∞ –ö–æ–¥ –∏—Å—Ç–µ–∫ (20 –º–∏–Ω—É—Ç)\n' +
                '–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            );
            return false;
        }

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userBindings.set(binding.userId, {
            chatId,
            username: binding.username,
            telegramUser: {
                id: telegramUser.id,
                username: telegramUser.username,
                first_name: telegramUser.first_name,
                last_name: telegramUser.last_name
            },
            bindDate: new Date().toISOString()
        });

        this.pendingCodes.delete(code);

        this.bot.sendMessage(chatId, 
            `‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${binding.username}\n` +
            `üì± Telegram: @${telegramUser.username || telegramUser.first_name}\n` +
            `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.`,
            { parse_mode: 'Markdown' }
        );

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${binding.username} –ø—Ä–∏–≤—è–∑–∞–ª Telegram @${telegramUser.username}`);
        return true;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserBinding(chatId) {
        for (const [userId, binding] of this.userBindings) {
            if (binding.chatId === chatId) {
                return { userId, ...binding };
            }
        }
        return null;
    }

    // –û—Ç–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    unbindUser(chatId) {
        for (const [userId, binding] of this.userBindings) {
            if (binding.chatId === chatId) {
                this.userBindings.delete(userId);
                console.log(`üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${binding.username} –æ—Ç–≤—è–∑–∞–ª Telegram`);
                return true;
            }
        }
        return false;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
    sendLoadAlert(userId, serverName, alertType, value, threshold) {
        const binding = this.userBindings.get(userId);
        if (!binding) return false;

        const icons = {
            cpu_high: 'üî•',
            memory_high: 'üíæ',
            disk_high: 'üíø'
        };

        const names = {
            cpu_high: 'CPU',
            memory_high: 'RAM',
            disk_high: '–î–∏—Å–∫'
        };

        const message = `
${icons[alertType]} *–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ${names[alertType]}*

üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: \`${serverName}\`
üìä –ó–Ω–∞—á–µ–Ω–∏–µ: *${value.toFixed(1)}%*
‚ö†Ô∏è –ü–æ—Ä–æ–≥: ${threshold}%
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

${value > 90 ? 'üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}
        `;

        this.bot.sendMessage(binding.chatId, message, { parse_mode: 'Markdown' });
        return true;
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É
    sendLoginAlert(userId, serverName, loginType, details) {
        const binding = this.userBindings.get(userId);
        if (!binding) return false;

        const icons = {
            success: '‚úÖ',
            failed: '‚ùå',
            suspicious: 'üö®'
        };

        const message = `
${icons[loginType]} *–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É*

üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: \`${serverName}\`
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${details.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üåê IP: \`${details.ip || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\`
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

${loginType === 'failed' ? '‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞' : ''}
${loginType === 'suspicious' ? 'üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!' : ''}
        `;

        this.bot.sendMessage(binding.chatId, message, { parse_mode: 'Markdown' });
        return true;
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å–µ—Ä–≤–µ—Ä–∞
    sendServerAlert(userId, serverName, eventType, message) {
        const binding = this.userBindings.get(userId);
        if (!binding) return false;

        const icons = {
            offline: 'üî¥',
            online: 'üü¢',
            restart: 'üîÑ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è'
        };

        const alertMessage = `
${icons[eventType]} *–°–æ–±—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞*

üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: \`${serverName}\`
üìù –°–æ–±—ã—Ç–∏–µ: ${message}
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
        `;

        this.bot.sendMessage(binding.chatId, alertMessage, { parse_mode: 'Markdown' });
        return true;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
    getBotStats() {
        return {
            totalBindings: this.userBindings.size,
            pendingCodes: this.pendingCodes.size,
            uptime: process.uptime()
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ (–¥–ª—è API)
    getAllBindings() {
        const bindings = {};
        for (const [userId, binding] of this.userBindings) {
            bindings[userId] = {
                username: binding.username,
                telegramUsername: binding.telegramUser.username,
                bindDate: binding.bindDate
            };
        }
        return bindings;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    isUserBound(userId) {
        return this.userBindings.has(userId);
    }
}

module.exports = XpanelTelegramBot;
